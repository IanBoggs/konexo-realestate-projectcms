// <auto-generated />
using System;
using CommonObjectLibraryCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CommonObjectLibraryCore.Migrations
{
    [DbContext(typeof(ProjectContext))]
    [Migration("20210831141707_CreateDB")]
    partial class CreateDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CommonObjectLibraryCore.BankDetail", b =>
                {
                    b.Property<int>("BankDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SortCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BankDetailId");

                    b.HasIndex("EntityId");

                    b.ToTable("BankDetails");
                });

            modelBuilder.Entity("CommonObjectLibraryCore.Case", b =>
                {
                    b.Property<int>("CaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CaseHandlerUserEntityId")
                        .HasColumnType("int");

                    b.Property<string>("CaseReference")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("ClientEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientReference")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CurrentStatusId")
                        .HasColumnType("int");

                    b.HasKey("CaseId");

                    b.HasIndex("CaseHandlerUserEntityId");

                    b.HasIndex("CaseReference")
                        .IsUnique();

                    b.HasIndex("ClientEntityId");

                    b.HasIndex("CurrentStatusId");

                    b.HasIndex("ClientReference", "ClientEntityId")
                        .IsUnique()
                        .HasFilter("[ClientReference] IS NOT NULL AND [ClientEntityId] IS NOT NULL");

                    b.ToTable("Cases");
                });

            modelBuilder.Entity("CommonObjectLibraryCore.CaseEntity", b =>
                {
                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BankDetailId")
                        .HasColumnType("int");

                    b.Property<int>("CaseEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("CompanyEntityEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("EntityRoleId")
                        .HasColumnType("int");

                    b.Property<Guid?>("IndividualEntityEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CaseId", "EntityId");

                    b.HasIndex("BankDetailId");

                    b.HasIndex("CompanyEntityEntityId");

                    b.HasIndex("EntityId");

                    b.HasIndex("EntityRoleId");

                    b.HasIndex("IndividualEntityEntityId");

                    b.ToTable("CaseEntity_Rel");
                });

            modelBuilder.Entity("CommonObjectLibraryCore.CaseStatus", b =>
                {
                    b.Property<int>("CaseStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CaseStatusName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CaseStatusId");

                    b.HasIndex("CaseStatusName")
                        .IsUnique()
                        .HasFilter("[CaseStatusName] IS NOT NULL");

                    b.ToTable("CasesStatuses");

                    b.HasData(
                        new
                        {
                            CaseStatusId = 1,
                            CaseStatusName = "In Progress"
                        },
                        new
                        {
                            CaseStatusId = 2,
                            CaseStatusName = "Aborted"
                        },
                        new
                        {
                            CaseStatusId = 3,
                            CaseStatusName = "Completed"
                        },
                        new
                        {
                            CaseStatusId = 4,
                            CaseStatusName = "PreCompletion"
                        },
                        new
                        {
                            CaseStatusId = 5,
                            CaseStatusName = "PostCompletion"
                        });
                });

            modelBuilder.Entity("CommonObjectLibraryCore.ClientEntity", b =>
                {
                    b.Property<Guid>("ClientEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ContactInformationContactDetailId")
                        .HasColumnType("int");

                    b.Property<string>("LegalClientName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PrincipalAddressPostalAddressId")
                        .HasColumnType("int");

                    b.Property<string>("SOSPrefixCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortClientName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientEntityId");

                    b.HasIndex("ContactInformationContactDetailId");

                    b.HasIndex("PrincipalAddressPostalAddressId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("CommonObjectLibraryCore.ContactDetail", b =>
                {
                    b.Property<int>("ContactDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DXAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobilePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondaryEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkFax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkPhone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContactDetailId");

                    b.ToTable("ContactDetails");
                });

            modelBuilder.Entity("CommonObjectLibraryCore.DataPointType", b =>
                {
                    b.Property<int>("DataPointTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DataPointName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DataPointTypeId");

                    b.ToTable("DataPointTypes");

                    b.HasData(
                        new
                        {
                            DataPointTypeId = 1,
                            DataPointName = "Reference"
                        },
                        new
                        {
                            DataPointTypeId = 2,
                            DataPointName = "Redemption Amount"
                        },
                        new
                        {
                            DataPointTypeId = 3,
                            DataPointName = "Redemption Expiry Date"
                        });
                });

            modelBuilder.Entity("CommonObjectLibraryCore.Entity", b =>
                {
                    b.Property<Guid>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ContactInformationContactDetailId")
                        .HasColumnType("int");

                    b.Property<int?>("DefaultBankDetailsBankDetailId")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PrincipalAddressPostalAddressId")
                        .HasColumnType("int");

                    b.HasKey("EntityId");

                    b.HasIndex("ContactInformationContactDetailId");

                    b.HasIndex("DefaultBankDetailsBankDetailId");

                    b.HasIndex("PrincipalAddressPostalAddressId");

                    b.ToTable("Entities");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Entity");
                });

            modelBuilder.Entity("CommonObjectLibraryCore.EntityDataPoint", b =>
                {
                    b.Property<int>("EntityDataPointId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CaseEntityCaseId")
                        .HasColumnType("int");

                    b.Property<Guid?>("CaseEntityEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DataPointTypeId")
                        .HasColumnType("int");

                    b.Property<string>("DataPointValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EntityDataPointId");

                    b.HasIndex("DataPointTypeId");

                    b.HasIndex("CaseEntityCaseId", "CaseEntityEntityId");

                    b.ToTable("EntityDataPoints");
                });

            modelBuilder.Entity("CommonObjectLibraryCore.EntityRole", b =>
                {
                    b.Property<int>("EntityRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EntityRoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("EntityRoleId");

                    b.HasIndex("EntityRoleName")
                        .IsUnique();

                    b.ToTable("EntityRoles");

                    b.HasData(
                        new
                        {
                            EntityRoleId = 1,
                            EntityRoleName = "Borrower"
                        },
                        new
                        {
                            EntityRoleId = 2,
                            EntityRoleName = "Solicitor"
                        },
                        new
                        {
                            EntityRoleId = 3,
                            EntityRoleName = "Lender"
                        });
                });

            modelBuilder.Entity("CommonObjectLibraryCore.PostalAddress", b =>
                {
                    b.Property<int>("PostalAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PostalAddressId");

                    b.ToTable("PostalAddresses");
                });

            modelBuilder.Entity("CommonObjectLibraryCore.UserEntity", b =>
                {
                    b.Property<int>("UserEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserEntityId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserEntityId = 1,
                            FullName = "Ian Boggs"
                        },
                        new
                        {
                            UserEntityId = 2,
                            FullName = "Sarah Jenkins"
                        });
                });

            modelBuilder.Entity("CommonObjectLibraryCore.CompanyEntity", b =>
                {
                    b.HasBaseType("CommonObjectLibraryCore.Entity");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("CompanyEntity");
                });

            modelBuilder.Entity("CommonObjectLibraryCore.IndividualEntity", b =>
                {
                    b.HasBaseType("CommonObjectLibraryCore.Entity");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstNames")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("IndividualEntity");
                });

            modelBuilder.Entity("CommonObjectLibraryCore.BankDetail", b =>
                {
                    b.HasOne("CommonObjectLibraryCore.Entity", null)
                        .WithMany("AlternativeBankDetails")
                        .HasForeignKey("EntityId");
                });

            modelBuilder.Entity("CommonObjectLibraryCore.Case", b =>
                {
                    b.HasOne("CommonObjectLibraryCore.UserEntity", "CaseHandler")
                        .WithMany()
                        .HasForeignKey("CaseHandlerUserEntityId");

                    b.HasOne("CommonObjectLibraryCore.ClientEntity", "Client")
                        .WithMany()
                        .HasForeignKey("ClientEntityId");

                    b.HasOne("CommonObjectLibraryCore.CaseStatus", "CurrentStatus")
                        .WithMany("Cases")
                        .HasForeignKey("CurrentStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CaseHandler");

                    b.Navigation("Client");

                    b.Navigation("CurrentStatus");
                });

            modelBuilder.Entity("CommonObjectLibraryCore.CaseEntity", b =>
                {
                    b.HasOne("CommonObjectLibraryCore.BankDetail", "BankDetail")
                        .WithMany()
                        .HasForeignKey("BankDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommonObjectLibraryCore.Case", "Case")
                        .WithMany("CaseEntities")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommonObjectLibraryCore.CompanyEntity", null)
                        .WithMany("CaseEntities")
                        .HasForeignKey("CompanyEntityEntityId");

                    b.HasOne("CommonObjectLibraryCore.Entity", "Entity")
                        .WithMany()
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommonObjectLibraryCore.EntityRole", "EntityRole")
                        .WithMany()
                        .HasForeignKey("EntityRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommonObjectLibraryCore.IndividualEntity", null)
                        .WithMany("CaseEntities")
                        .HasForeignKey("IndividualEntityEntityId");

                    b.Navigation("BankDetail");

                    b.Navigation("Case");

                    b.Navigation("Entity");

                    b.Navigation("EntityRole");
                });

            modelBuilder.Entity("CommonObjectLibraryCore.ClientEntity", b =>
                {
                    b.HasOne("CommonObjectLibraryCore.ContactDetail", "ContactInformation")
                        .WithMany()
                        .HasForeignKey("ContactInformationContactDetailId");

                    b.HasOne("CommonObjectLibraryCore.PostalAddress", "PrincipalAddress")
                        .WithMany()
                        .HasForeignKey("PrincipalAddressPostalAddressId");

                    b.Navigation("ContactInformation");

                    b.Navigation("PrincipalAddress");
                });

            modelBuilder.Entity("CommonObjectLibraryCore.Entity", b =>
                {
                    b.HasOne("CommonObjectLibraryCore.ContactDetail", "ContactInformation")
                        .WithMany()
                        .HasForeignKey("ContactInformationContactDetailId");

                    b.HasOne("CommonObjectLibraryCore.BankDetail", "DefaultBankDetails")
                        .WithMany()
                        .HasForeignKey("DefaultBankDetailsBankDetailId");

                    b.HasOne("CommonObjectLibraryCore.PostalAddress", "PrincipalAddress")
                        .WithMany()
                        .HasForeignKey("PrincipalAddressPostalAddressId");

                    b.Navigation("ContactInformation");

                    b.Navigation("DefaultBankDetails");

                    b.Navigation("PrincipalAddress");
                });

            modelBuilder.Entity("CommonObjectLibraryCore.EntityDataPoint", b =>
                {
                    b.HasOne("CommonObjectLibraryCore.DataPointType", "DataPointType")
                        .WithMany()
                        .HasForeignKey("DataPointTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommonObjectLibraryCore.CaseEntity", null)
                        .WithMany("CaseEntityDataPointList")
                        .HasForeignKey("CaseEntityCaseId", "CaseEntityEntityId");

                    b.Navigation("DataPointType");
                });

            modelBuilder.Entity("CommonObjectLibraryCore.Case", b =>
                {
                    b.Navigation("CaseEntities");
                });

            modelBuilder.Entity("CommonObjectLibraryCore.CaseEntity", b =>
                {
                    b.Navigation("CaseEntityDataPointList");
                });

            modelBuilder.Entity("CommonObjectLibraryCore.CaseStatus", b =>
                {
                    b.Navigation("Cases");
                });

            modelBuilder.Entity("CommonObjectLibraryCore.Entity", b =>
                {
                    b.Navigation("AlternativeBankDetails");
                });

            modelBuilder.Entity("CommonObjectLibraryCore.CompanyEntity", b =>
                {
                    b.Navigation("CaseEntities");
                });

            modelBuilder.Entity("CommonObjectLibraryCore.IndividualEntity", b =>
                {
                    b.Navigation("CaseEntities");
                });
#pragma warning restore 612, 618
        }
    }
}
